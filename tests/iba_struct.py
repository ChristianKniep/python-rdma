#!/usr/bin/python
import unittest,sys
import rdma.IBA as IBA;

class structs_test(unittest.TestCase):
    def test_struct_packer(self):
        test = bytearray(512);
        testr = bytes(test);
        assert(len(test) == 512);
        IBA.HdrLRH().pack_into(test);
        IBA.HdrLRH().unpack_from(testr);
        IBA.HdrLRH(testr);
        assert(len(test) == 512);
        IBA.HdrRWH().pack_into(test);
        IBA.HdrRWH().unpack_from(testr);
        IBA.HdrRWH(testr);
        assert(len(test) == 512);
        IBA.HdrGRH().pack_into(test);
        IBA.HdrGRH().unpack_from(testr);
        IBA.HdrGRH(testr);
        assert(len(test) == 512);
        IBA.HdrBTH().pack_into(test);
        IBA.HdrBTH().unpack_from(testr);
        IBA.HdrBTH(testr);
        assert(len(test) == 512);
        IBA.HdrRDETH().pack_into(test);
        IBA.HdrRDETH().unpack_from(testr);
        IBA.HdrRDETH(testr);
        assert(len(test) == 512);
        IBA.HdrDETH().pack_into(test);
        IBA.HdrDETH().unpack_from(testr);
        IBA.HdrDETH(testr);
        assert(len(test) == 512);
        IBA.HdrRETH().pack_into(test);
        IBA.HdrRETH().unpack_from(testr);
        IBA.HdrRETH(testr);
        assert(len(test) == 512);
        IBA.HdrAtomicETH().pack_into(test);
        IBA.HdrAtomicETH().unpack_from(testr);
        IBA.HdrAtomicETH(testr);
        assert(len(test) == 512);
        IBA.HdrAETH().pack_into(test);
        IBA.HdrAETH().unpack_from(testr);
        IBA.HdrAETH(testr);
        assert(len(test) == 512);
        IBA.HdrAtomicAckETH().pack_into(test);
        IBA.HdrAtomicAckETH().unpack_from(testr);
        IBA.HdrAtomicAckETH(testr);
        assert(len(test) == 512);
        IBA.HdrImmDt().pack_into(test);
        IBA.HdrImmDt().unpack_from(testr);
        IBA.HdrImmDt(testr);
        assert(len(test) == 512);
        IBA.HdrIETH().pack_into(test);
        IBA.HdrIETH().unpack_from(testr);
        IBA.HdrIETH(testr);
        assert(len(test) == 512);
        IBA.HdrFlowControl().pack_into(test);
        IBA.HdrFlowControl().unpack_from(testr);
        IBA.HdrFlowControl(testr);
        assert(len(test) == 512);
        IBA.CMFormat().pack_into(test);
        IBA.CMFormat().unpack_from(testr);
        IBA.CMFormat(testr);
        assert(len(test) == 512);
        IBA.CMPath().pack_into(test);
        IBA.CMPath().unpack_from(testr);
        IBA.CMPath(testr);
        assert(len(test) == 512);
        IBA.CMREQ().pack_into(test);
        IBA.CMREQ().unpack_from(testr);
        IBA.CMREQ(testr);
        assert(len(test) == 512);
        IBA.CMMRA().pack_into(test);
        IBA.CMMRA().unpack_from(testr);
        IBA.CMMRA(testr);
        assert(len(test) == 512);
        IBA.CMREJ().pack_into(test);
        IBA.CMREJ().unpack_from(testr);
        IBA.CMREJ(testr);
        assert(len(test) == 512);
        IBA.CMREP().pack_into(test);
        IBA.CMREP().unpack_from(testr);
        IBA.CMREP(testr);
        assert(len(test) == 512);
        IBA.CMRTU().pack_into(test);
        IBA.CMRTU().unpack_from(testr);
        IBA.CMRTU(testr);
        assert(len(test) == 512);
        IBA.CMDREQ().pack_into(test);
        IBA.CMDREQ().unpack_from(testr);
        IBA.CMDREQ(testr);
        assert(len(test) == 512);
        IBA.CMDREP().pack_into(test);
        IBA.CMDREP().unpack_from(testr);
        IBA.CMDREP(testr);
        assert(len(test) == 512);
        IBA.CMLAP().pack_into(test);
        IBA.CMLAP().unpack_from(testr);
        IBA.CMLAP(testr);
        assert(len(test) == 512);
        IBA.CMAPR().pack_into(test);
        IBA.CMAPR().unpack_from(testr);
        IBA.CMAPR(testr);
        assert(len(test) == 512);
        IBA.CMSIDR_REQ().pack_into(test);
        IBA.CMSIDR_REQ().unpack_from(testr);
        IBA.CMSIDR_REQ(testr);
        assert(len(test) == 512);
        IBA.CMSIDR_REP().pack_into(test);
        IBA.CMSIDR_REP().unpack_from(testr);
        IBA.CMSIDR_REP(testr);
        assert(len(test) == 512);
        IBA.MADHeader().pack_into(test);
        IBA.MADHeader().unpack_from(testr);
        IBA.MADHeader(testr);
        assert(len(test) == 512);
        IBA.MADHeaderDirected().pack_into(test);
        IBA.MADHeaderDirected().unpack_from(testr);
        IBA.MADHeaderDirected(testr);
        assert(len(test) == 512);
        IBA.MADClassPortInfo().pack_into(test);
        IBA.MADClassPortInfo().unpack_from(testr);
        IBA.MADClassPortInfo(testr);
        assert(len(test) == 512);
        IBA.MADInformInfo().pack_into(test);
        IBA.MADInformInfo().unpack_from(testr);
        IBA.MADInformInfo(testr);
        assert(len(test) == 512);
        IBA.RMPPHeader().pack_into(test);
        IBA.RMPPHeader().unpack_from(testr);
        IBA.RMPPHeader(testr);
        assert(len(test) == 512);
        IBA.RMPPShortHeader().pack_into(test);
        IBA.RMPPShortHeader().unpack_from(testr);
        IBA.RMPPShortHeader(testr);
        assert(len(test) == 512);
        IBA.RMPPData().pack_into(test);
        IBA.RMPPData().unpack_from(testr);
        IBA.RMPPData(testr);
        assert(len(test) == 512);
        IBA.RMPPAck().pack_into(test);
        IBA.RMPPAck().unpack_from(testr);
        IBA.RMPPAck(testr);
        assert(len(test) == 512);
        IBA.RMPPAbort().pack_into(test);
        IBA.RMPPAbort().unpack_from(testr);
        IBA.RMPPAbort(testr);
        assert(len(test) == 512);
        IBA.RMPPStop().pack_into(test);
        IBA.RMPPStop().unpack_from(testr);
        IBA.RMPPStop(testr);
        assert(len(test) == 512);
        IBA.SMPLIDPortBlock().pack_into(test);
        IBA.SMPLIDPortBlock().unpack_from(testr);
        IBA.SMPLIDPortBlock(testr);
        assert(len(test) == 512);
        IBA.SMPFormat().pack_into(test);
        IBA.SMPFormat().unpack_from(testr);
        IBA.SMPFormat(testr);
        assert(len(test) == 512);
        IBA.SMPFormatDirected().pack_into(test);
        IBA.SMPFormatDirected().unpack_from(testr);
        IBA.SMPFormatDirected(testr);
        assert(len(test) == 512);
        IBA.SMPNodeDescription().pack_into(test);
        IBA.SMPNodeDescription().unpack_from(testr);
        IBA.SMPNodeDescription(testr);
        assert(len(test) == 512);
        IBA.SMPNodeInfo().pack_into(test);
        IBA.SMPNodeInfo().unpack_from(testr);
        IBA.SMPNodeInfo(testr);
        assert(len(test) == 512);
        IBA.SMPSwitchInfo().pack_into(test);
        IBA.SMPSwitchInfo().unpack_from(testr);
        IBA.SMPSwitchInfo(testr);
        assert(len(test) == 512);
        IBA.SMPGUIDInfo().pack_into(test);
        IBA.SMPGUIDInfo().unpack_from(testr);
        IBA.SMPGUIDInfo(testr);
        assert(len(test) == 512);
        IBA.SMPPortInfo().pack_into(test);
        IBA.SMPPortInfo().unpack_from(testr);
        IBA.SMPPortInfo(testr);
        assert(len(test) == 512);
        IBA.SMPPKeyTable().pack_into(test);
        IBA.SMPPKeyTable().unpack_from(testr);
        IBA.SMPPKeyTable(testr);
        assert(len(test) == 512);
        IBA.SMPSLToVLMappingTable().pack_into(test);
        IBA.SMPSLToVLMappingTable().unpack_from(testr);
        IBA.SMPSLToVLMappingTable(testr);
        assert(len(test) == 512);
        IBA.SMPVLArbitrationTable().pack_into(test);
        IBA.SMPVLArbitrationTable().unpack_from(testr);
        IBA.SMPVLArbitrationTable(testr);
        assert(len(test) == 512);
        IBA.SMPLinearForwardingTable().pack_into(test);
        IBA.SMPLinearForwardingTable().unpack_from(testr);
        IBA.SMPLinearForwardingTable(testr);
        assert(len(test) == 512);
        IBA.SMPRandomForwardingTable().pack_into(test);
        IBA.SMPRandomForwardingTable().unpack_from(testr);
        IBA.SMPRandomForwardingTable(testr);
        assert(len(test) == 512);
        IBA.SMPMulticastForwardingTable().pack_into(test);
        IBA.SMPMulticastForwardingTable().unpack_from(testr);
        IBA.SMPMulticastForwardingTable(testr);
        assert(len(test) == 512);
        IBA.SMPSMInfo().pack_into(test);
        IBA.SMPSMInfo().unpack_from(testr);
        IBA.SMPSMInfo(testr);
        assert(len(test) == 512);
        IBA.SMPVendorDiag().pack_into(test);
        IBA.SMPVendorDiag().unpack_from(testr);
        IBA.SMPVendorDiag(testr);
        assert(len(test) == 512);
        IBA.SMPLedInfo().pack_into(test);
        IBA.SMPLedInfo().unpack_from(testr);
        IBA.SMPLedInfo(testr);
        assert(len(test) == 512);
        IBA.SAHeader().pack_into(test);
        IBA.SAHeader().unpack_from(testr);
        IBA.SAHeader(testr);
        assert(len(test) == 512);
        IBA.SAFormat().pack_into(test);
        IBA.SAFormat().unpack_from(testr);
        IBA.SAFormat(testr);
        assert(len(test) == 512);
        IBA.SANodeRecord().pack_into(test);
        IBA.SANodeRecord().unpack_from(testr);
        IBA.SANodeRecord(testr);
        assert(len(test) == 512);
        IBA.SAPortInfoRecord().pack_into(test);
        IBA.SAPortInfoRecord().unpack_from(testr);
        IBA.SAPortInfoRecord(testr);
        assert(len(test) == 512);
        IBA.SASLToVLMappingTableRecord().pack_into(test);
        IBA.SASLToVLMappingTableRecord().unpack_from(testr);
        IBA.SASLToVLMappingTableRecord(testr);
        assert(len(test) == 512);
        IBA.SASwitchInfoRecord().pack_into(test);
        IBA.SASwitchInfoRecord().unpack_from(testr);
        IBA.SASwitchInfoRecord(testr);
        assert(len(test) == 512);
        IBA.SALinearForwardingTableRecord().pack_into(test);
        IBA.SALinearForwardingTableRecord().unpack_from(testr);
        IBA.SALinearForwardingTableRecord(testr);
        assert(len(test) == 512);
        IBA.SARandomForwardingTableRecord().pack_into(test);
        IBA.SARandomForwardingTableRecord().unpack_from(testr);
        IBA.SARandomForwardingTableRecord(testr);
        assert(len(test) == 512);
        IBA.SAMulticastForwardingTableRecord().pack_into(test);
        IBA.SAMulticastForwardingTableRecord().unpack_from(testr);
        IBA.SAMulticastForwardingTableRecord(testr);
        assert(len(test) == 512);
        IBA.SAVLArbitrationTableRecord().pack_into(test);
        IBA.SAVLArbitrationTableRecord().unpack_from(testr);
        IBA.SAVLArbitrationTableRecord(testr);
        assert(len(test) == 512);
        IBA.SASMInfoRecord().pack_into(test);
        IBA.SASMInfoRecord().unpack_from(testr);
        IBA.SASMInfoRecord(testr);
        assert(len(test) == 512);
        IBA.SAInformInfoRecord().pack_into(test);
        IBA.SAInformInfoRecord().unpack_from(testr);
        IBA.SAInformInfoRecord(testr);
        assert(len(test) == 512);
        IBA.SALinkRecord().pack_into(test);
        IBA.SALinkRecord().unpack_from(testr);
        IBA.SALinkRecord(testr);
        assert(len(test) == 512);
        IBA.SAGUIDInfoRecord().pack_into(test);
        IBA.SAGUIDInfoRecord().unpack_from(testr);
        IBA.SAGUIDInfoRecord(testr);
        assert(len(test) == 512);
        IBA.SAServiceRecord().pack_into(test);
        IBA.SAServiceRecord().unpack_from(testr);
        IBA.SAServiceRecord(testr);
        assert(len(test) == 512);
        IBA.SAPKeyTableRecord().pack_into(test);
        IBA.SAPKeyTableRecord().unpack_from(testr);
        IBA.SAPKeyTableRecord(testr);
        assert(len(test) == 512);
        IBA.SAPathRecord().pack_into(test);
        IBA.SAPathRecord().unpack_from(testr);
        IBA.SAPathRecord(testr);
        assert(len(test) == 512);
        IBA.SAMCMemberRecord().pack_into(test);
        IBA.SAMCMemberRecord().unpack_from(testr);
        IBA.SAMCMemberRecord(testr);
        assert(len(test) == 512);
        IBA.SATraceRecord().pack_into(test);
        IBA.SATraceRecord().unpack_from(testr);
        IBA.SATraceRecord(testr);
        assert(len(test) == 512);
        IBA.SAMultiPathRecord().pack_into(test);
        IBA.SAMultiPathRecord().unpack_from(testr);
        IBA.SAMultiPathRecord(testr);
        assert(len(test) == 512);
        IBA.SAServiceAssociationRecord().pack_into(test);
        IBA.SAServiceAssociationRecord().unpack_from(testr);
        IBA.SAServiceAssociationRecord(testr);
        assert(len(test) == 512);
        IBA.PMFormat().pack_into(test);
        IBA.PMFormat().unpack_from(testr);
        IBA.PMFormat(testr);
        assert(len(test) == 512);
        IBA.PMPortSamplesCtl().pack_into(test);
        IBA.PMPortSamplesCtl().unpack_from(testr);
        IBA.PMPortSamplesCtl(testr);
        assert(len(test) == 512);
        IBA.PMPortSamplesRes().pack_into(test);
        IBA.PMPortSamplesRes().unpack_from(testr);
        IBA.PMPortSamplesRes(testr);
        assert(len(test) == 512);
        IBA.PMPortCounters().pack_into(test);
        IBA.PMPortCounters().unpack_from(testr);
        IBA.PMPortCounters(testr);
        assert(len(test) == 512);
        IBA.PMPortRcvErrorDetails().pack_into(test);
        IBA.PMPortRcvErrorDetails().unpack_from(testr);
        IBA.PMPortRcvErrorDetails(testr);
        assert(len(test) == 512);
        IBA.PMPortXmitDiscardDetails().pack_into(test);
        IBA.PMPortXmitDiscardDetails().unpack_from(testr);
        IBA.PMPortXmitDiscardDetails(testr);
        assert(len(test) == 512);
        IBA.PMPortOpRcvCounters().pack_into(test);
        IBA.PMPortOpRcvCounters().unpack_from(testr);
        IBA.PMPortOpRcvCounters(testr);
        assert(len(test) == 512);
        IBA.PMPortFlowCtlCounters().pack_into(test);
        IBA.PMPortFlowCtlCounters().unpack_from(testr);
        IBA.PMPortFlowCtlCounters(testr);
        assert(len(test) == 512);
        IBA.PMPortVLOpPackets().pack_into(test);
        IBA.PMPortVLOpPackets().unpack_from(testr);
        IBA.PMPortVLOpPackets(testr);
        assert(len(test) == 512);
        IBA.PMPortVLOpData().pack_into(test);
        IBA.PMPortVLOpData().unpack_from(testr);
        IBA.PMPortVLOpData(testr);
        assert(len(test) == 512);
        IBA.PMPortVLXmitFlowCtlUpdateErrors().pack_into(test);
        IBA.PMPortVLXmitFlowCtlUpdateErrors().unpack_from(testr);
        IBA.PMPortVLXmitFlowCtlUpdateErrors(testr);
        assert(len(test) == 512);
        IBA.PMPortVLXmitWaitCounters().pack_into(test);
        IBA.PMPortVLXmitWaitCounters().unpack_from(testr);
        IBA.PMPortVLXmitWaitCounters(testr);
        assert(len(test) == 512);
        IBA.PMSwPortVLCongestion().pack_into(test);
        IBA.PMSwPortVLCongestion().unpack_from(testr);
        IBA.PMSwPortVLCongestion(testr);
        assert(len(test) == 512);
        IBA.PMPortSamplesResExt().pack_into(test);
        IBA.PMPortSamplesResExt().unpack_from(testr);
        IBA.PMPortSamplesResExt(testr);
        assert(len(test) == 512);
        IBA.PMPortCountersExt().pack_into(test);
        IBA.PMPortCountersExt().unpack_from(testr);
        IBA.PMPortCountersExt(testr);
        assert(len(test) == 512);
        IBA.DMFormat().pack_into(test);
        IBA.DMFormat().unpack_from(testr);
        IBA.DMFormat(testr);
        assert(len(test) == 512);
        IBA.DMServiceEntry().pack_into(test);
        IBA.DMServiceEntry().unpack_from(testr);
        IBA.DMServiceEntry(testr);
        assert(len(test) == 512);
        IBA.DMIOUnitInfo().pack_into(test);
        IBA.DMIOUnitInfo().unpack_from(testr);
        IBA.DMIOUnitInfo(testr);
        assert(len(test) == 512);
        IBA.DMIOControllerProfile().pack_into(test);
        IBA.DMIOControllerProfile().unpack_from(testr);
        IBA.DMIOControllerProfile(testr);
        assert(len(test) == 512);
        IBA.DMServiceEntries().pack_into(test);
        IBA.DMServiceEntries().unpack_from(testr);
        IBA.DMServiceEntries(testr);
        assert(len(test) == 512);
        IBA.DMDiagnosticTimeout().pack_into(test);
        IBA.DMDiagnosticTimeout().unpack_from(testr);
        IBA.DMDiagnosticTimeout(testr);
        assert(len(test) == 512);
        IBA.DMPrepareToTest().pack_into(test);
        IBA.DMPrepareToTest().unpack_from(testr);
        IBA.DMPrepareToTest(testr);
        assert(len(test) == 512);
        IBA.DMTestDeviceOnce().pack_into(test);
        IBA.DMTestDeviceOnce().unpack_from(testr);
        IBA.DMTestDeviceOnce(testr);
        assert(len(test) == 512);
        IBA.DMTestDeviceLoop().pack_into(test);
        IBA.DMTestDeviceLoop().unpack_from(testr);
        IBA.DMTestDeviceLoop(testr);
        assert(len(test) == 512);
        IBA.DMDiagCode().pack_into(test);
        IBA.DMDiagCode().unpack_from(testr);
        IBA.DMDiagCode(testr);
        assert(len(test) == 512);
        IBA.SNMPFormat().pack_into(test);
        IBA.SNMPFormat().unpack_from(testr);
        IBA.SNMPFormat(testr);
        assert(len(test) == 512);
        IBA.SNMPCommunityInfo().pack_into(test);
        IBA.SNMPCommunityInfo().unpack_from(testr);
        IBA.SNMPCommunityInfo(testr);
        assert(len(test) == 512);
        IBA.SNMPPDUInfo().pack_into(test);
        IBA.SNMPPDUInfo().unpack_from(testr);
        IBA.SNMPPDUInfo(testr);
    def test_struct_printer(self):
        IBA.HdrLRH().printer(sys.stdout);
        IBA.HdrRWH().printer(sys.stdout);
        IBA.HdrGRH().printer(sys.stdout);
        IBA.HdrBTH().printer(sys.stdout);
        IBA.HdrRDETH().printer(sys.stdout);
        IBA.HdrDETH().printer(sys.stdout);
        IBA.HdrRETH().printer(sys.stdout);
        IBA.HdrAtomicETH().printer(sys.stdout);
        IBA.HdrAETH().printer(sys.stdout);
        IBA.HdrAtomicAckETH().printer(sys.stdout);
        IBA.HdrImmDt().printer(sys.stdout);
        IBA.HdrIETH().printer(sys.stdout);
        IBA.HdrFlowControl().printer(sys.stdout);
        IBA.CMFormat().printer(sys.stdout);
        IBA.CMPath().printer(sys.stdout);
        IBA.CMREQ().printer(sys.stdout);
        IBA.CMMRA().printer(sys.stdout);
        IBA.CMREJ().printer(sys.stdout);
        IBA.CMREP().printer(sys.stdout);
        IBA.CMRTU().printer(sys.stdout);
        IBA.CMDREQ().printer(sys.stdout);
        IBA.CMDREP().printer(sys.stdout);
        IBA.CMLAP().printer(sys.stdout);
        IBA.CMAPR().printer(sys.stdout);
        IBA.CMSIDR_REQ().printer(sys.stdout);
        IBA.CMSIDR_REP().printer(sys.stdout);
        IBA.MADHeader().printer(sys.stdout);
        IBA.MADHeaderDirected().printer(sys.stdout);
        IBA.MADClassPortInfo().printer(sys.stdout);
        IBA.MADInformInfo().printer(sys.stdout);
        IBA.RMPPHeader().printer(sys.stdout);
        IBA.RMPPShortHeader().printer(sys.stdout);
        IBA.RMPPData().printer(sys.stdout);
        IBA.RMPPAck().printer(sys.stdout);
        IBA.RMPPAbort().printer(sys.stdout);
        IBA.RMPPStop().printer(sys.stdout);
        IBA.SMPLIDPortBlock().printer(sys.stdout);
        IBA.SMPFormat().printer(sys.stdout);
        IBA.SMPFormatDirected().printer(sys.stdout);
        IBA.SMPNodeDescription().printer(sys.stdout);
        IBA.SMPNodeInfo().printer(sys.stdout);
        IBA.SMPSwitchInfo().printer(sys.stdout);
        IBA.SMPGUIDInfo().printer(sys.stdout);
        IBA.SMPPortInfo().printer(sys.stdout);
        IBA.SMPPKeyTable().printer(sys.stdout);
        IBA.SMPSLToVLMappingTable().printer(sys.stdout);
        IBA.SMPVLArbitrationTable().printer(sys.stdout);
        IBA.SMPLinearForwardingTable().printer(sys.stdout);
        IBA.SMPRandomForwardingTable().printer(sys.stdout);
        IBA.SMPMulticastForwardingTable().printer(sys.stdout);
        IBA.SMPSMInfo().printer(sys.stdout);
        IBA.SMPVendorDiag().printer(sys.stdout);
        IBA.SMPLedInfo().printer(sys.stdout);
        IBA.SAHeader().printer(sys.stdout);
        IBA.SAFormat().printer(sys.stdout);
        IBA.SANodeRecord().printer(sys.stdout);
        IBA.SAPortInfoRecord().printer(sys.stdout);
        IBA.SASLToVLMappingTableRecord().printer(sys.stdout);
        IBA.SASwitchInfoRecord().printer(sys.stdout);
        IBA.SALinearForwardingTableRecord().printer(sys.stdout);
        IBA.SARandomForwardingTableRecord().printer(sys.stdout);
        IBA.SAMulticastForwardingTableRecord().printer(sys.stdout);
        IBA.SAVLArbitrationTableRecord().printer(sys.stdout);
        IBA.SASMInfoRecord().printer(sys.stdout);
        IBA.SAInformInfoRecord().printer(sys.stdout);
        IBA.SALinkRecord().printer(sys.stdout);
        IBA.SAGUIDInfoRecord().printer(sys.stdout);
        IBA.SAServiceRecord().printer(sys.stdout);
        IBA.SAPKeyTableRecord().printer(sys.stdout);
        IBA.SAPathRecord().printer(sys.stdout);
        IBA.SAMCMemberRecord().printer(sys.stdout);
        IBA.SATraceRecord().printer(sys.stdout);
        IBA.SAMultiPathRecord().printer(sys.stdout);
        IBA.SAServiceAssociationRecord().printer(sys.stdout);
        IBA.PMFormat().printer(sys.stdout);
        IBA.PMPortSamplesCtl().printer(sys.stdout);
        IBA.PMPortSamplesRes().printer(sys.stdout);
        IBA.PMPortCounters().printer(sys.stdout);
        IBA.PMPortRcvErrorDetails().printer(sys.stdout);
        IBA.PMPortXmitDiscardDetails().printer(sys.stdout);
        IBA.PMPortOpRcvCounters().printer(sys.stdout);
        IBA.PMPortFlowCtlCounters().printer(sys.stdout);
        IBA.PMPortVLOpPackets().printer(sys.stdout);
        IBA.PMPortVLOpData().printer(sys.stdout);
        IBA.PMPortVLXmitFlowCtlUpdateErrors().printer(sys.stdout);
        IBA.PMPortVLXmitWaitCounters().printer(sys.stdout);
        IBA.PMSwPortVLCongestion().printer(sys.stdout);
        IBA.PMPortSamplesResExt().printer(sys.stdout);
        IBA.PMPortCountersExt().printer(sys.stdout);
        IBA.DMFormat().printer(sys.stdout);
        IBA.DMServiceEntry().printer(sys.stdout);
        IBA.DMIOUnitInfo().printer(sys.stdout);
        IBA.DMIOControllerProfile().printer(sys.stdout);
        IBA.DMServiceEntries().printer(sys.stdout);
        IBA.DMDiagnosticTimeout().printer(sys.stdout);
        IBA.DMPrepareToTest().printer(sys.stdout);
        IBA.DMTestDeviceOnce().printer(sys.stdout);
        IBA.DMTestDeviceLoop().printer(sys.stdout);
        IBA.DMDiagCode().printer(sys.stdout);
        IBA.SNMPFormat().printer(sys.stdout);
        IBA.SNMPCommunityInfo().printer(sys.stdout);
        IBA.SNMPPDUInfo().printer(sys.stdout);
if __name__ == '__main__':
    unittest.main()
