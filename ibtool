#!/usr/bin/env python
# Copyright 2011 Obsidian Research Corp. GLPv2, see COPYING.
from __future__ import with_statement;
import sys;
import rdma;
import inspect;
from libibtool import *;
from libibtool.tools import *;

# Generate the global command map
commands = {
    "ibroute": None,
    "dump_lfts": ("libibtool.ibroute",),
    "dump_lfts.sh": ("libibtool.ibroute","cmd_dump_lfts",False),
    "dump_mfts": ("libibtool.ibroute",),
    "dump_mfts.sh": ("libibtool.ibroute","cmd_dump_mfts",False),
    "ibfindnodesusing": ("libibtool.ibroute",),
    "ibfindnodesusing.pl": ("libibtool.ibroute","cmd_ibfindnodesusing",False),

    "perfquery": None,
    "ibswportwatch": ("libibtool.perfquery",),
    "ibswportwatch.pl": ("libibtool.perfquery","cmd_ibswportwatch",False),
    "saquery": None,
    "smpquery": None,
    "ibtracert": None,

    "ibv_devices": ("libibtool.inquiry",),
    "ibstat": ("libibtool.inquiry",),
    "ibstatus": ("libibtool.inquiry",),
    "ibaddr": ("libibtool.inquiry",),
    "sminfo": ("libibtool.inquiry",),
    "smpdump": ("libibtool.inquiry",),
    "decode_mad": ("libibtool.inquiry",),
    "ibportstate": ("libibtool.inquiry",),
    "query": ("libibtool.inquiry",),
    "set_nodedesc": ("libibtool.inquiry",),
    "set_nodedesc.sh": ("libibtool.inquiry","cmd_set_nodedesc",False),

    "ibhosts": ("libibtool.discovery",),
    "ibprintca": ("libibtool.discovery",),
    "ibprintca.pl": ("libibtool.discovery","cmd_ibprintca",False),
    "ibrouters": ("libibtool.discovery",),
    "ibprintrt": ("libibtool.discovery",),
    "ibprintrt.pl": ("libibtool.discovery","cmd_ibprintrt",False),
    "ibswitches": ("libibtool.discovery",),
    "ibprintswitch": ("libibtool.discovery",),
    "ibprintswitch.pl": ("libibtool.discovery","cmd_ibprintswitch",False),
    "ibnodes": ("libibtool.discovery",),
    "ibnetdiscover": ("libibtool.discovery",),

    "ibchecknode": ("libibtool.errors",),
    "ibcheckstate": ("libibtool.errors",),
    "ibcheckport": ("libibtool.errors",),
    "ibchecknet": ("libibtool.errors",),
    "ibcheckportstate": ("libibtool.errors",),
    "ibcheckportwidth": ("libibtool.errors",),
    "ibcheckwidth": ("libibtool.errors",),
    "ibcheckerrs": ("libibtool.errors",),
    "ibcheckerrors": ("libibtool.errors",),
    "ibclearcounters": ("libibtool.errors",),
    "ibclearerrors": ("libibtool.errors",),
    "ibdatacounters": ("libibtool.errors",),
    "ibdatacounts": ("libibtool.errors",),

    "rdma_bw": None,

    "vendstat": None,
    "ibsysstat": ("libibtool.vendstat",),
    "ibping": ("libibtool.vendstat",),

    "help": (__name__,),
};

def get_cmd_func(name):
    loc = commands[name];
    module = "libibtool.%s"%(name)
    func = "cmd_%s"%(name);
    shown = True;
    if loc is not None:
        if len(loc) >= 3:
            shown = loc[2];
        if len(loc) >= 2:
            func = loc[1];
        if len(loc) >= 1:
            module = loc[0];

    rmodule = sys.modules.get(module);
    if rmodule is None:
        __import__(module);
        rmodule = sys.modules[module];
    return getattr(rmodule,func),shown;

def cmd_help(argv,o):
    """Display the help text
       Usage: %prog"""
    (args,values) = o.parse_args(argv);

    if len(argv) == 0:
        # Abuse the optparse help formatter to format the help text for
        # our commands
        class Formatter(MyHelpFormatter):
            def format_option(self, option):
                if option.action == "help":
                    self.option_strings[option] = "help";
                else:
                    self.option_strings[option] = self.option_strings[option][3:];
                return MyHelpFormatter.format_option(self,option);

        o = MyOptParse(cmd_help);
        for k in sorted(commands.iterkeys()):
            if k == "help":
                continue
            func,shown = get_cmd_func(k);
            if not shown:
                continue;
            doc = inspect.getdoc(func);
            doc = [i for i in doc.split("\n") if len(i) != 0];
            o.add_option("--x" + k,action="store_true",help=doc[0]);

        print "ibtool - Command suite for IB management"
        print "Usage: ibtool command [args]"
        print
        print o.format_option_help(Formatter());
        print "ibtool help [command] shows detailed help for each command";
        return True;

    if len(argv) == 1 and commands.has_key(argv[0]):
        func,shown = get_cmd_func(argv[0]);
        o = MyOptParse(func);
        func(["--help"],o);
    else:
        print "No help text for %s"%(argv);
    return True;

if __name__ == '__main__':
    if len(sys.argv) == 1:
        cmd_help([],MyOptParse(cmd_help));
        sys.exit(0);

    argv = sys.argv[2:];
    cmd = sys.argv[1];
    if commands.has_key(cmd):
        func,shown = get_cmd_func(cmd);
        o = MyOptParse(func);
        try:
            if not func(argv,o):
                sys.exit(100);
            sys.exit(0);
        except CmdError as err:
            print "E:",err;
            if o.verbosity >= 2:
                raise;
        except rdma.MADError as err:
            err.dump_detailed(sys.stderr,"E:",level=o.verbosity);
            if o.verbosity >= 2:
                raise;
        except rdma.RDMAError as err:
            print "E:",err;
            if o.verbosity >= 2:
                raise;
        sys.exit(100);
    else:
        sys.stderr.write("Bad command %s\n"%(sys.argv[1]));
        sys.exit(1);
